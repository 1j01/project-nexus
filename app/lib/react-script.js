// Generated by CoffeeScript 1.9.1
(function() {
  var E, React, add, hyphenate, is_plainish_object, ref,
    slice = [].slice;

  React = (ref = this.React) != null ? ref : require("react");

  is_plainish_object = function(o) {
    return (o != null) && typeof o === "object" && !((o.length != null) || React.isValidElement(o));
  };

  add = function(from, arg) {
    var i, k, len, results, results1, thing, to, v;
    to = arg.to;
    if (from instanceof Array) {
      results = [];
      for (i = 0, len = from.length; i < len; i++) {
        thing = from[i];
        results.push(add(thing, {
          to: to
        }));
      }
      return results;
    } else if (is_plainish_object(from)) {
      results1 = [];
      for (k in from) {
        v = from[k];
        if (v) {
          results1.push(to.push(hyphenate(k)));
        }
      }
      return results1;
    } else if (from != null) {
      return to.push(from);
    }
  };

  hyphenate = function(v) {
    return ("" + v).replace(/_/g, "-").replace(/([a-z])([A-Z])/g, function(m, az, AZ) {
      return az + "-" + (AZ.toLowerCase());
    });
  };

  E = function() {
    var addAttr, ak, args, attrArgs, av, childArgs, classNames, dk, dv, elementType, finalAttrs, finalChildren, selAttrs, selector, unhandled;
    elementType = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (elementType == null) {
      elementType = "";
    }
    if (is_plainish_object(args[0])) {
      attrArgs = args[0], childArgs = 2 <= args.length ? slice.call(args, 1) : [];
    } else {
      childArgs = 1 <= args.length ? slice.call(args, 0) : [];
      attrArgs = null;
    }
    switch (typeof elementType) {
      case "string":
        selector = elementType;
        elementType = "div";
        selAttrs = selector.replace(/^[a-z][a-z0-9\-_]*/i, function(match) {
          elementType = match;
          return "";
        });
        finalAttrs = {};
        classNames = [];
        addAttr = function(ak, av) {
          if (av !== false) {
            return finalAttrs[ak] = av;
          }
        };
        for (ak in attrArgs) {
          av = attrArgs[ak];
          if (ak === "class" || ak === "className" || ak === "classes" || ak === "classNames" || ak === "classList") {
            add(av, {
              to: classNames
            });
          } else if (ak === "data") {
            for (dk in av) {
              dv = av[dk];
              addAttr("data-" + (hyphenate(dk)), dv);
            }
          } else if (ak.match(/^data|aria/)) {
            addAttr(hyphenate(ak), av);
          } else {
            addAttr(ak, av);
          }
        }
        if (selAttrs) {
          unhandled = selAttrs.replace(/\.([a-z][a-z0-9\-_]*)/gi, function(m, className) {
            classNames.push(className);
            return "";
          }).replace(/#([a-z][a-z0-9\-_]*)/gi, function(m, id) {
            finalAttrs.id = id;
            return "";
          });
        }
        if (unhandled) {
          throw new Error("Unhandled selector fragment '" + unhandled + "' in selector: '" + selector + "'");
        }
        if (classNames.length) {
          finalAttrs.className = classNames.join(" ");
        }
        break;
      case "function":
        finalAttrs = attrArgs;
        break;
      default:
        throw new Error("Invalid first argument to ReactScript: " + elementType);
    }
    finalChildren = [];
    add(childArgs, {
      to: finalChildren
    });
    return React.createElement(elementType, finalAttrs, finalChildren);
  };

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = E;
  } else {
    this.ReactScript = E;
  }

}).call(this);
